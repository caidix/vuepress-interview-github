(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{357:function(t,i,a){"use strict";a.r(i);var e=a(1),v=Object(e.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("前言：\n"),i("a",{attrs:{href:"https://juejin.im/post/5edcf3a36fb9a047fa04fbc3",target:"_blank",rel:"noopener noreferrer"}},[t._v("一份值得收藏的 Git 异常处理清单"),i("OutboundLink")],1)]),t._v(" "),i("img",{attrs:{src:"/vuepress-interview-github/assets/tools/git.jpg"}}),t._v(" "),i("ul",[i("li",[i("p",[t._v("Workspace: 工作区")])]),t._v(" "),i("li",[i("p",[t._v("Index / Stage: 暂存区")])]),t._v(" "),i("li",[i("p",[t._v("Repository: 本地仓库")])]),t._v(" "),i("li",[i("p",[t._v("Remote: 远程仓库")])]),t._v(" "),i("li",[i("p",[t._v("添加当前目录的所有文件到暂存区\n$ git add *")])]),t._v(" "),i("li",[i("p",[t._v("提交暂存区到仓库区\n$ git commit -m [message]")])]),t._v(" "),i("li",[i("p",[t._v("为远程 Git 更名为 origin\n$ git remote add origin git@github.com:abcd/tmp.git")])]),t._v(" "),i("li",[i("p",[t._v("推送此次修改，这是首次推送需要加上-u,之后推送就可以直接 git push origin master,origin 是远程 Git 名字，\n这个可以自己定义，不过一般是用 origin 罢了，master 是默认的分支，如果不在 master 分支提交需要写清楚分支名称\n$ git push -u origin master")])]),t._v(" "),i("li",[i("p",[t._v("添加指定文件到暂存区\n$ git add [file1][file2] ...")])]),t._v(" "),i("li",[i("p",[t._v("添加指定目录到暂存区，包括子目录\n$ git add [dir]")])]),t._v(" "),i("li",[i("p",[t._v("添加当前目录的所有文件到暂存区\n$ git add *")])]),t._v(" "),i("li",[i("p",[t._v("添加每个变化前，都会要求确认\n对于同一个文件的多处变化，可以实现分次提交\n$ git add -p")])]),t._v(" "),i("li",[i("p",[t._v("删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1][file2] ...")])]),t._v(" "),i("li",[i("p",[t._v("停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]")])]),t._v(" "),i("li",[i("p",[t._v("改名文件，并且将这个改名放入暂存区\n$ git mv [file-original][file-renamed]")])]),t._v(" "),i("li",[i("p",[t._v("提交暂存区到仓库区\n$ git commit -m [message]")])]),t._v(" "),i("li",[i("p",[t._v("提交暂存区的指定文件到仓库区\n$ git commit [file1][file2] ... -m [message]")])]),t._v(" "),i("li",[i("p",[t._v("提交工作区自上次 commit 之后的变化，直接到仓库区\n$ git commit -a")])]),t._v(" "),i("li",[i("p",[t._v("提交时显示所有 diff 信息\n$ git commit -v")])]),t._v(" "),i("li",[i("p",[t._v("使用一次新的 commit，替代上一次提交\n如果代码没有任何新变化，则用来改写上一次 commit 的提交信息\n$ git commit --amend -m [message]")])]),t._v(" "),i("li",[i("p",[t._v("重做上一次 commit，并包括指定文件的新变化\n$ git commit --amend [file1][file2] ...")])]),t._v(" "),i("li",[i("p",[t._v("提交更改到远程仓库\n$ git push origin master")])]),t._v(" "),i("li",[i("p",[t._v("拉取远程更改到本地仓库默认自动合并\n$ git pull origin master\n但如果是多人协作的话，git 的魅力就开始提现出来了，每个人有自己的一个分支，各自在自己的分支上工作互不干扰")])]),t._v(" "),i("li",[i("p",[t._v("列出所有本地分支\n$ git branch")])]),t._v(" "),i("li",[i("p",[t._v("列出所有远程分支\n$ git branch -r")])]),t._v(" "),i("li",[i("p",[t._v("列出所有本地分支和远程分支\n$ git branch -a")])]),t._v(" "),i("li",[i("p",[t._v("新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]")])]),t._v(" "),i("li",[i("p",[t._v("新建一个分支，并切换到该分支\n$ git checkout -b [branch]")])]),t._v(" "),i("li",[i("p",[t._v("新建一个分支，指向指定 commit\n$ git branch [branch][commit]")])]),t._v(" "),i("li",[i("p",[t._v("新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch][remote-branch]")])]),t._v(" "),i("li",[i("p",[t._v("切换到指定分支，并更新工作区\n$ git checkout [branch-name]")])]),t._v(" "),i("li",[i("p",[t._v("切换到上一个分支\n$ git checkout -")])]),t._v(" "),i("li",[i("p",[t._v("建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch][remote-branch]")])]),t._v(" "),i("li",[i("p",[t._v("合并指定分支到当前分支，如果有冲突需要手动合并冲突（就是手动编辑文件保存咯），然后 add,commit 再提交\n$ git merge [branch]")])]),t._v(" "),i("li",[i("p",[t._v("选择一个 commit，合并进当前分支\n$ git cherry-pick [commit]")])]),t._v(" "),i("li",[i("p",[t._v("删除分支\n$ git branch -d [branch-name]")])]),t._v(" "),i("li",[i("p",[t._v("删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]")])])]),t._v(" "),i("p",[t._v("标签的作用主要是用来做版本回退的，关于版本回退，这也是 Git 的亮点之一，起到了后悔药的功能·")]),t._v(" "),i("ul",[i("li",[t._v("列出所有 tag\n$ git tag")]),t._v(" "),i("li",[t._v("新建一个 tag 在当前 commit\n$ git tag [tag]")]),t._v(" "),i("li",[t._v("新建一个 tag 在指定 commit\n$ git tag [tag][commit]")]),t._v(" "),i("li",[t._v("删除本地 tag\n$ git tag -d [tag]")]),t._v(" "),i("li",[t._v("删除远程 tag\n$ git push origin :refs/tags/[tagName]")]),t._v(" "),i("li",[t._v("查看 tag 信息\n$ git show [tag]")]),t._v(" "),i("li",[t._v("提交指定 tag\n$ git push [remote][tag]")]),t._v(" "),i("li",[t._v("提交所有 tag\n$ git push [remote] --tags")]),t._v(" "),i("li",[t._v("新建一个分支，指向某个 tag\n$ git checkout -b [branch][tag]\n想一下在你写完 N 个文件代码后，commit 到了本地仓库，突然发现整个应用崩溃了！咋整？Git 给了我们吃后悔药\n的机会：")]),t._v(" "),i("li",[t._v("恢复暂存区的指定文件到工作区\n$ git checkout [file]")]),t._v(" "),i("li",[t._v("恢复某个 commit 的指定文件到暂存区和工作区\n$ git checkout [commit][file]")]),t._v(" "),i("li",[t._v("恢复暂存区的所有文件到工作区\n$ git checkout .")]),t._v(" "),i("li",[t._v("回退到上一个版本，在 Git 中，用 HEAD 表示当前版本\n$ git reset --hard HEAD^")]),t._v(" "),i("li",[t._v("重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变\n$ git reset [file]")]),t._v(" "),i("li",[t._v("重置暂存区与工作区，与上一次 commit 保持一致\n$ git reset --hard")]),t._v(" "),i("li",[t._v("重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变\n$ git reset [commit]")]),t._v(" "),i("li",[t._v("重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致\n$ git reset --hard [commit]")]),t._v(" "),i("li",[t._v("重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]")]),t._v(" "),i("li",[t._v("新建一个 commit，用来撤销指定 commit")]),t._v(" "),i("li",[t._v("后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]")]),t._v(" "),i("li",[t._v("暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop")])]),t._v(" "),i("p",[t._v("文件信息")]),t._v(" "),i("ul",[i("li",[t._v("显示当前分支的版本历史\n$ git log")]),t._v(" "),i("li",[t._v("显示 commit 历史，以及每次 commit 发生变更的文件\n$ git log --stat")]),t._v(" "),i("li",[t._v("搜索提交历史，根据关键词\n$ git log -S [keyword]")]),t._v(" "),i("li",[t._v("显示某个 commit 之后的所有变动，每个 commit 占据一行\n$ git log [tag] HEAD --pretty=format:%s")]),t._v(" "),i("li",[t._v('显示某个 commit 之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature')]),t._v(" "),i("li",[t._v("显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]")]),t._v(" "),i("li",[t._v("显示指定文件相关的每一次 diff\n$ git log -p [file]")]),t._v(" "),i("li",[t._v("显示过去 5 次提交\n$ git log -5 --pretty --oneline")]),t._v(" "),i("li",[t._v("显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn")]),t._v(" "),i("li",[t._v("显示指定文件是什么人在什么时间修改过\n$ git blame [file]")]),t._v(" "),i("li",[t._v("显示暂存区和工作区的差异\n$ git diff")]),t._v(" "),i("li",[t._v("显示暂存区和上一个 commit 的差异\n$ git diff --cached [file]")]),t._v(" "),i("li",[t._v("显示工作区与当前分支最新 commit 之间的差异\n$ git diff HEAD")]),t._v(" "),i("li",[t._v("显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]")]),t._v(" "),i("li",[t._v('显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"')]),t._v(" "),i("li",[t._v("显示某次提交的元数据和内容变化\n$ git show [commit]")]),t._v(" "),i("li",[t._v("显示某次提交发生变化的文件\n$ git show --name-only [commit]")]),t._v(" "),i("li",[t._v("显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]")])]),t._v(" "),i("h2",{attrs:{id:"git-如何丢弃所有没有-add-到暂存区的代码"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-如何丢弃所有没有-add-到暂存区的代码"}},[t._v("#")]),t._v(" git 如何丢弃所有没有 add 到暂存区的代码？")]),t._v(" "),i("p",[t._v("git checkout .")]),t._v(" "),i("h2",{attrs:{id:"git-上次修改有缺陷-但是-commit-了怎么办"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-上次修改有缺陷-但是-commit-了怎么办"}},[t._v("#")]),t._v(" git 上次修改有缺陷，但是 commit 了怎么办？")]),t._v(" "),i("p",[t._v('git add . 此次修改\ngit commit --amend -m "新的提交信息" 或者 git commit --amend --no-edit')]),t._v(" "),i("ul",[i("li",[t._v("会对最新一条 commit 修正，会把当前 commit 里的内容和最新加入暂存区的代码进行合并后建立一个新的 commit，代替掉之前的那条 commit")]),t._v(" "),i("li",[t._v("--no-edit 的意思是不会修改提交信息，按上次提交的信息来")])]),t._v(" "),i("h2",{attrs:{id:"git-代码已经-push-上去发现有问题想强制输出到远程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-代码已经-push-上去发现有问题想强制输出到远程"}},[t._v("#")]),t._v(" git 代码已经 push 上去发现有问题想强制输出到远程")]),t._v(" "),i("p",[t._v("git push origin branch -f\n-f 是 --force 的缩写，意为「忽略冲突，强制 push」\n如果出错内容已经 push 到了 master 分支\n这种情况可以使用 Git 的 revert 指令。\ngit revert HEAD^\n上面这行代码就会增加一条新的 commit，它的内容和倒数第二个 commit 是相反的，从而和倒数第二个 commit 相互抵消，达到撤销的效果。\n在 revert 完成之后，把新的 commit 再 push 上去，这个 commit 的内容就被撤销了。（revert 与前面说的 reset 最主要的区别是，这次改动只是被「反转」了，并没有在历史中消失掉，你的历史中会存在两条 commit ：一个原始 commit ，一个对它的反转 commit。")]),t._v(" "),i("h2",{attrs:{id:"git-如何关联账号"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-如何关联账号"}},[t._v("#")]),t._v(" git 如何关联账号")]),t._v(" "),i("div",{staticClass:"language-js line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-js"}},[i("code",[t._v("git config user"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name   "),i("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("查看git当前配置用户名\ngit config user"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email  "),i("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("查看git当前配置的邮箱\ngit config user"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name 名称 设置用户名\ngit config user"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email 邮箱 设置git邮箱\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br"),i("span",{staticClass:"line-number"},[t._v("2")]),i("br"),i("span",{staticClass:"line-number"},[t._v("3")]),i("br"),i("span",{staticClass:"line-number"},[t._v("4")]),i("br")])]),i("p",[t._v("全局命令设置")]),t._v(" "),i("div",{staticClass:"language-js line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-js"}},[i("code",[t._v(" git config  "),i("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name 你的目标用户名；\n git config  "),i("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email 你的目标邮箱名"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br"),i("span",{staticClass:"line-number"},[t._v("2")]),i("br")])]),i("h2",{attrs:{id:"git-规范类型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-规范类型"}},[t._v("#")]),t._v(" git 规范类型")]),t._v(" "),i("ul",[i("li",[t._v("feat：新功能（feature）")]),t._v(" "),i("li",[t._v("fix：修补 bug")]),t._v(" "),i("li",[t._v("docs：文档（documentation）")]),t._v(" "),i("li",[t._v("0style： 格式（不影响代码运行的变动）")]),t._v(" "),i("li",[t._v("refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）")]),t._v(" "),i("li",[t._v("test：增加测试")]),t._v(" "),i("li",[t._v("chore：其他修改，比如构建过程或辅助工具的变动")])]),t._v(" "),i("h2",{attrs:{id:"本地工作区文件恢复"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#本地工作区文件恢复"}},[t._v("#")]),t._v(" 本地工作区文件恢复")]),t._v(" "),i("p",[t._v("git checkout <filename/dirname>")]),t._v(" "),i("h2",{attrs:{id:"修改提交时的备注内容"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#修改提交时的备注内容"}},[t._v("#")]),t._v(" 修改提交时的备注内容")]),t._v(" "),i("p",[t._v("git commit --amend")]),t._v(" "),i("h2",{attrs:{id:"修改分支名-实现无缝衔接"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#修改分支名-实现无缝衔接"}},[t._v("#")]),t._v(" 修改分支名，实现无缝衔接")]),t._v(" "),i("p",[t._v("例如，我们的想新建的分支名为 feature/story-13711，却写成了 feature/stor-13711：\n语法：git branch -m <oldbranch> <newbranch>\n命令：git branch -m feature/stor-13711 feature/story-13711")]),t._v(" "),i("h2",{attrs:{id:"撤销当前的-commit-操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#撤销当前的-commit-操作"}},[t._v("#")]),t._v(" 撤销当前的 commit 操作")]),t._v(" "),i("p",[t._v("语法： git reset --soft [<commit-id>/HEAD~n>]\n命令：git reset --soft HEAD~1")]),t._v(" "),i("p",[t._v("用新的更改替换撤回的更改\n提交之中可能有些地方需要优化，我们可以撤销本次的 commit 以及文件暂存状态，修改之后再重新添加到暂存区进行提交。\n语法： git reset --mixed [<commit-id>/HEAD~n>]\n命令：git reset --mixed HEAD~1")]),t._v(" "),i("p",[t._v("本地提交了错误的文件\n本地将完全错误的，本不应提交的内容提交到了仓库，需要进行撤销，可以使用 --hard 参数")]),t._v(" "),i("p",[t._v("语法： git reset --hard [<commit-id>/HEAD~n>]\n命令：git reset --hard HEAD~1\n文件的修改都会被撤销。-hard 参数需要谨慎使用。")]),t._v(" "),i("h2",{attrs:{id:"撤销本地分支合并"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#撤销本地分支合并"}},[t._v("#")]),t._v(" 撤销本地分支合并")]),t._v(" "),i("ol",[i("li",[t._v("将所有的合并内容的撤销到之前的样子\ngit reset --hard 2.将所有的合并撤销，并保留合并分支和撤回记录\n语法：git revert <commit-id>\n命令：git revert 700920")])]),t._v(" "),i("h2",{attrs:{id:"恢复误删的本地分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#恢复误删的本地分支"}},[t._v("#")]),t._v(" 恢复误删的本地分支")]),t._v(" "),i("p",[t._v("误删的分支为 feature/delete，使用 git reflog 命令可查看到该仓库下的所有历史操作\n语法：git checkout -b <branch-name> <commit-id>\n命令：git checkout -b feature/delete HEAD@{2}\n命令执行完成后，分支恢复到 HEAD@{2} 的快照，即从 master 分支拉取 feature/delete 分支的内容，仍然缺少“新增 xxx 文件”的提交，直接将文件内容恢复到最新的提交内容，使用命令 git reset --hard HEAD@{1} 即可实现硬性覆盖本地工作区内容的目的。git reflog 命令获取到的内容为本地仓库所有发生过的变更，可谓恢复利器，既可向前追溯，亦可向后调整。")]),t._v(" "),i("h2",{attrs:{id:"git-对大小写不敏感-想修改文件的大小写并且与别的分支合并怎么办"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-对大小写不敏感-想修改文件的大小写并且与别的分支合并怎么办"}},[t._v("#")]),t._v(" git 对大小写不敏感，想修改文件的大小写并且与别的分支合并怎么办？")]),t._v(" "),i("ul",[i("li",[t._v("git config core.ignorecase false 关闭忽略大小写设置")]),t._v(" "),i("li",[t._v("git rm xxx (删掉想更换大小写的文件，在这之前记得 copy 备份一个文件)")]),t._v(" "),i("li",[t._v("修改备份文件名")]),t._v(" "),i("li",[t._v("git add commit push")])])])}),[],!1,null,null,null);i.default=v.exports}}]);